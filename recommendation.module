<?php

/*
 * Implement hook_menu
 */
 
module_load_include('api.inc', 'qtr','qtr');

/*function recommendation_menu() {
    $items['recommendation/updatesimilarity'] = array(
        'title' => 'Update table similarity',
        'description' => 'Update table similarity i.e. the similarity score of all records',
        'page callback' => 'update_similarity',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );

    return $items;
}*/

/*
 * Implemens hook_block_info
 */

function recommendation_block_info() {
    $blocks['recommendation'] = array(
        'info' => t('Recommendation'),
        'region' => 'sidebar_first',
        'status' => TRUE
    );
    $blocks['similar_user'] = array(
        'info' => t('Similar users'),
        'region' => 'sidebar_first',
        'status' => TRUE
    );
    return $blocks;
}

/*
 * Implements hook_block_configure
 */

function recommendation_block_configure($delta = '') {
 if($delta=='recommendation'){
	$form['description'] = array(
    	'#markup' => '<p>' . t('You can specify !cron frequency to run this recommender. Click the button run now: ', 
    	array('!cron' => l('cron', 'admin/config/system/cron'))) . '</p>',
  	);
  $form['run'] = array(
    '#type' => 'submit',
    '#value' => t('Run recommender'),
    '#submit' => array('update_similarity'),
  );
	 $form['rec_number'] = array(
      '#type' => 'select',
      '#title' => t('Number of recommendation item'), 
      '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30)),
      '#default_value' => variable_get('rec_number',10),
    );	
     $posttype = array ();$default = array();
    foreach (node_type_get_types() as $type => $type_obj) {
            $posttype[$type] = $type_obj->name;
            if(variable_get('rec_block_'.$type,0)){
              $default[]=$type;
            }
    }
    
    $form['content_type'] = array(
      '#type' => 'checkboxes', 
      '#title' => t('Content type to recommend:'), 
      '#options' => $posttype,
      '#default_value' => $default,
    );

  	$actions=qtr_get_actiontype();
  	if($actions){
  	foreach($actions as $action){
  		$default_value=0;
  		if($action->action=='view'){
  			$default_value=1;
  		}elseif($action->action=='download' || $action->action=='vote'){
  			$default_value=5;
  		}
  		 $form['rec_w_'.$action->action] = array(
    		'#type' => 'textfield',
    		'#title' => t('Weight of %action action', array('%action'=>$action->action)),
    		'#default_value' => variable_get('rec_w_'.$action->action, $default_value),
  		);
  	}
  }
    return $form;
 }
}

/*
 * Implements hook_block_save
 */

function recommendation_block_save($delta, $edit = array()) {
	if($delta=='recommendation'){
    foreach (node_type_get_types() as $type => $type_obj) {
      if(variable_get('rec_block_'.$type,0)){
        variable_del('rec_block_'.$type);
      }
    }
   foreach($edit['content_type'] as $type){
      variable_set('rec_block_'.$type, $type);
   }
  variable_set('rec_number',$edit['rec_number']);
  $actions=qtr_get_actiontype();
  if($actions){
  foreach($actions as $action){
   		variable_set('rec_w_'.$action->action,$edit['rec_w_'.$action->action]);
  }
  }
	}
}

/*
 * Implements hook_block_view
 */

function recommendation_block_view($delta = '') {
	if($delta=='recommendation'){
    global $user;
    if($user->uid<1){
			return false;
		}
    $blocks['subject'] = 'Recommendation';
    $contents = '<ul class="red_arrow_li">';
    $recommendation_title = array();
    $recommendation_score = array();
    //get all users who have similarity relationship with $user
   // $similarity = db_query('SELECT * FROM {similarity} WHERE uid1=:uid1', array(':uid1' => $user->uid))->fetchAll();
    $sql='SELECT a.nid, n.title, sum(case a.action_type ';
    $actions=qtr_get_actiontype();
  	if($actions){
  			foreach($actions as $action){
  				$sql.=' when '.$action->id.' then s.score *'.variable_get('rec_w_'.$action->action,0);
  		}
  	}
    $sql.=' end) as value from {qtr_actions} AS a INNER JOIN {similarity} AS s ON a.uid=s.uid2 INNER JOIN {node} as n ON n.nid=a.nid WHERE s.uid1='.$user->uid.' and n.uid!='.$user->uid;
    $i=0;
    foreach (node_type_get_types() as $type => $type_obj) {
            if(variable_get('rec_block_'.$type,0)){
            	if($i==0){
            		$i++;
            		$sql.=' and (n.type=\''.$type.'\'';
            	}else{
            		$sql.=' OR n.type=\''.$type.'\'';
            	}
            }
    }
    
    $sql.=') and not exists (select * from {qtr_actions} as a2 where a2.uid = ' . $user->uid . ' and a2.nid = a.nid) GROUP BY nid ORDER BY value limit '.variable_get('rec_number',10);
    $recommendation_list = db_query($sql)->fetchAll();

    if (count($recommendation_list)>0) {

        foreach ($recommendation_list as $entity) {
            $contents .= '<li><a href="'.url('node/' . $entity->nid) . '" target="_blank">' . $entity->title . '</a></li>';
        }
    }else{
    	$contents .= 'Sorry, there is noting to recomend to you yet.';
    }
    $contents .= '</ul>';
    $blocks['content'] = $contents;
    return $blocks;
	}else if($delta=='similar_user'){
		global $user;
		if($user->uid<1){
			return false;
		}
    	$blocks['subject'] = 'Similar users';
    	$contents = '<ul class="red_arrow_li2">';
    	$sql='SELECT s.uid2 from {similarity} as s WHERE s.uid1= '.$user->uid.' and s.score>0 ORDER BY s.score limit 5';
    	$susers= db_query($sql)->fetchAll();
    	if (count($susers)>0) {
        	foreach ($susers as $suser) {
        		$getuser=user_load($suser->uid2);
            	$contents .= '<li><a href="'.url('user/' . $suser->uid2) . '" target="_blank">' . $getuser->name . '</a></li>';
        	}
    	}else{
    	$contents .= 'Sorry, there are no similar users for you yet.';
    }
    $contents .= '</ul>';
    $blocks['content'] = $contents;
    return $blocks;
	}
}

/*
 * Implements hook_cron
 * 
 * Automatically update table similarity
 */

function recommendation_cron() {
    update_similarity();
}

/*
 * Update table similarity
 */

function update_similarity() {
	throw new exception(1);
    /* similarity of user i and j are defined as 
     * s_{ij}=\sum{v_{ia}v_{ja}}/(W_iW_j)
     *  where v_{ia} is the vote value of user i to paper a.
     */
    //if there is less than one user in table users except anonymous user(uid = 0),exit the function
    $results = db_query("SELECT uid FROM {users} WHERE uid > :uid0", array("uid0" => 0))->fetchAll();;
    if (count($results) <= 1) {
        exit;
    }
    //calculate the vote value of uid to entity_id
    $sql = 'SELECT uid, nid, sum(case action_type ';
     $actions=qtr_get_actiontype();
  if($actions){
  	foreach($actions as $action){
  		$sql.=' when '.$action->id.' then '.variable_get('rec_w_'.$action->action,0);
  	}
  }
  $sql.=' end) as w FROM {qtr_actions} WHERE uid != 0 GROUP BY uid, nid ORDER BY uid';
  
    $weights = db_query($sql)->fetchAll();

    //if there is less than one voting record, exit the function
    if (count($weights) <= 1) {
        exit;
    }

    //calculate the the W_i for each user i
    //$w[i] : the W_i of user i
    $w = array();
    $lastuser = $weights[0]->uid;
    $sum = 0;
    foreach ($weights as $weight) {
        $uid = $weight->uid;
        if ($uid != 0) {
            if ($uid != $lastuser) {
                $w[$lastuser] = $sum;
                $lastuser = $uid;
                $sum = $weight->w * $weight->w;
            } else {
                $sum += $weight->w * $weight->w;
            }
        }
    }
    $w[$lastuser] = $sum;
    $num = count($w);
    $i = 1;

    // calculate the similarity and update it
    foreach ($w as $user1 => $wp1) {
        $j = 0;
        foreach ($w as $user2 => $wp2) {
            $wc = 0;
            foreach ($weights as $weight) {
                if ($weight->uid == $user1) {
                    $pid = $weight->nid;
                    foreach ($weights as $weight2) {
                        if ($weight2->uid == $user2 && $weight2->nid == $pid) {
                            $wc += $weight->w * $weight2->w;
                        }
                    }
                }
            }
            if ($j >= $i) {
                //update similarity
                $s = $wc / pow($wp1 * $wp2, 0.5);
                //$row1 = $similar->fetchRow($similar->select()->where('(user1 = "' . $user1 . '" and user2 = "' . $user2 . '" )'));
                //$row2 = $similar->fetchRow($similar->select()->where('(user1 = "' . $user2 . '" and user2 = "' . $user1 . '" )'));
                $row1 = db_query("select * from {similarity} where uid1=:user1 and uid2=:user2", array(":user1" => $user1, ":user2" => $user2))->fetchCol();
                $row2 = db_query("select * from {similarity} where uid1=:user2 and uid2=:user1", array(":user1" => $user1, ":user2" => $user2))->fetchCol();
                if ($row1) {
                    db_update("similarity")
                            ->fields(array(
                                "score" => $s,
                                "update_time" => REQUEST_TIME
                            ))
                            ->condition("uid1", $user1)
                            ->condition("uid2", $user2)
                            ->execute();
                } else {
                    db_insert("similarity")
                            ->fields(array(
                                "uid1" => $user1,
                                "uid2" => $user2,
                                "score" => $s,
                                "update_time" => REQUEST_TIME
                            ))
                            ->execute();
                }
                if ($row2) {
                    db_update("similarity")
                            ->fields(array(
                                "score" => $s,
                                "update_time" => REQUEST_TIME
                            ))
                            ->condition("uid1", $user2)
                            ->condition("uid2", $user1)
                            ->execute();
                } else {
                    db_insert("similarity")
                            ->fields(array(
                                "uid1" => $user2,
                                "uid2" => $user1,
                                "score" => $s,
                                "update_time" => REQUEST_TIME
                            ))
                            ->execute();
                }
            }
            $j++;
        }
        $i++;
    }
}

